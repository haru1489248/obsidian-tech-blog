name: Publish Articles to Qiita

on:
  push:
    paths:
      - "Zenn*/publish/*.md"  # Obsidianのpublishフォルダ内の.mdファイルが対象

jobs:
  publish_to_qiita:
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: 必要なツールをインストール (jq)
        run: sudo apt-get install -y jq

      - name: Qiitaに投稿（新規 or 更新）
        run: |
          for file in Zenn*/publish/*.md; do
            if grep -q "publish: true" "$file"; then  # publish: true のものだけ投稿
              TITLE=$(grep "^title: " "$file" | cut -d'"' -f2) # titleを取得
              BODY=$(tail -n +5 "$file") # メタデータを除いた本文
              ARTICLE_ID=$(grep "^qiita_id: " "$file" | cut -d' ' -f2) # 記事IDを取得

              echo "処理中の記事: $file"
              echo "記事ID: $ARTICLE_ID"

              JSON_PAYLOAD=$(jq -n --arg title "$TITLE" --arg body "$BODY" \
                '{title: $title, body: $body, tags: [{name: "技術"}], private: false}')

              if [ ! -z "$ARTICLE_ID" ]; then
                # 記事 ID がある場合は GET で存在確認
                CHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
                  -H "Authorization: Bearer ${{ secrets.QIITA_TOKEN }}" \
                  "https://qiita.com/api/v2/items/$ARTICLE_ID")

                if [ "$CHECK_RESPONSE" -ne 200 ]; then
                  echo "記事ID $ARTICLE_ID が見つからないため、新規投稿に切り替えます"
                  ARTICLE_ID=""
                fi
              fi

              if [ -z "$ARTICLE_ID" ]; then
                # 記事 ID がない場合は新規投稿
                RESPONSE=$(curl -s -X POST "https://qiita.com/api/v2/items" \
                  -H "Authorization: Bearer ${{ secrets.QIITA_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "$JSON_PAYLOAD")

                # 記事 ID を取得して Obsidian のファイルに保存
                NEW_ID=$(echo "$RESPONSE" | jq -r '.id')
                if [ "$NEW_ID" != "null" ]; then
                  echo "" >> "$file"  # 改行を追加（ファイルの最後に追加するため）
                  echo "qiita_id: $NEW_ID" >> "$file"
                  echo "記事ID $NEW_ID を保存しました"
                fi
              else
                # 記事 ID がある場合は更新
                UPDATE_RESPONSE=$(curl -s -X PUT "https://qiita.com/api/v2/items/$ARTICLE_ID" \
                  -H "Authorization: Bearer ${{ secrets.QIITA_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "$JSON_PAYLOAD")

                echo "記事ID $ARTICLE_ID の更新結果: $UPDATE_RESPONSE"
              fi
            fi
          done

      - name: GitHubに変更をプッシュ（記事IDを保存 & コンフリクト解消）
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # リモートの変更を先に取り込む（コンフリクト防止）
          git pull --rebase origin main || echo "No remote changes to pull"

          git add Zenn*/publish/*.md
          git commit -m "記事IDを追加" || echo "No changes to commit"
          git push origin main || echo "No changes to push"
